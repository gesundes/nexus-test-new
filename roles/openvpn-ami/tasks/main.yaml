---
- name: add ssh key to AWS
  ec2_key:
    name: "{{ ec2_ssh_key_name }}"
    key_material: "{{ lookup('file', '~/.ssh/id_rsa.pub') }}"
  register: ssh_key
- name: provision OpenVPN EC2 instance which will be converted to AMI
  ec2:
    key_name: "{{ ssh_key.key.name }}"
    instance_type: "{{ ec2_type_ami }}"
    image: "{{ ec2_base_ami }}"
    user_data: "{{lookup('file', 'install_openvpn.sh') }}"
    wait: yes
  register: ovpn_ec2
- name: wait for OpenSSH server up
  wait_for:
    port: 22
    host: '{{ ovpn_ec2.instances.0.public_ip }}'
    search_regex: OpenSSH
    delay: 10
- name: wait for ca.crt in /home/ubuntu
  command: ssh -o StrictHostKeyChecking=no ubuntu@{{ ovpn_ec2.instances.0.public_ip }} while true; do if [ -f /home/ubuntu/ca.crt ]; then break; fi; done
- name: download ca.crt from user homedir
  command: scp -o StrictHostKeyChecking=no ubuntu@{{ ovpn_ec2.instances.0.public_ip }}:/home/ubuntu/ca.crt .
- name: remove ca.crt from user homedir
  command: ssh -o StrictHostKeyChecking=no ubuntu@{{ ovpn_ec2.instances.0.public_ip }} rm -f /home/ubuntu/ca.crt 
- name: wait for /etc/openvpn/server.conf
  command: ssh -o StrictHostKeyChecking=no ubuntu@{{ ovpn_ec2.instances.0.public_ip }} while true; do if [ -f /etc/openvpn/server.conf ]; then break; fi; done; sleep 9
- name: stop OpenVPN ec2 instance
  ec2:
    instance_ids: "{{ ovpn_ec2.instance_ids.0 }}"
    state: stopped
    wait: yes
- name: create AMI based on ec2 instance with OpenVPN
  ec2_ami:
    instance_id: "{{ ovpn_ec2.instance_ids.0 }}"
    wait: yes
    name: openvpn-test
  register: openvpn_ami
- name: terminate OpenVPN ec2 instance
  ec2:
    instance_ids: "{{ ovpn_ec2.instance_ids.0 }}"
    state: absent
    wait: no
